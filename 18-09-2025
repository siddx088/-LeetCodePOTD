class TaskManager {
public:
    // Heap element: (priority, taskId, userId)
    priority_queue<array<int,3>> pq; 
    unordered_map<int, pair<int,int>> taskMap; 
    // taskId -> {userId, priority}

    TaskManager(vector<vector<int>>& tasks) {
        for (auto &t : tasks) {
            int userId = t[0], taskId = t[1], priority = t[2];
            add(userId, taskId, priority);
        }
    }
    
    void add(int userId, int taskId, int priority) {
        taskMap[taskId] = {userId, priority};
        pq.push({priority, taskId, userId});
    }
    
    void edit(int taskId, int newPriority) {
        int userId = taskMap[taskId].first;
        taskMap[taskId] = {userId, newPriority};
        pq.push({newPriority, taskId, userId});
    }
    
    void rmv(int taskId) {
        taskMap.erase(taskId);
    }
    
    int execTop() {
        while (!pq.empty()) {
            auto top = pq.top();
            int priority = top[0], taskId = top[1], userId = top[2];
            if (taskMap.find(taskId) != taskMap.end() && taskMap[taskId].second == priority) {
                pq.pop();
                taskMap.erase(taskId);
                return userId;
            }
            pq.pop(); // discard outdated
        }
        return -1;
    }
};
