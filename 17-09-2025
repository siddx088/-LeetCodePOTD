#include <bits/stdc++.h>
using namespace std;

class FoodRatings {
private:
    unordered_map<string, string> food_to_cuisine;   // food -> cuisine
    unordered_map<string, int> food_to_rating;       // food -> rating
    
    // Custom comparator for ordering foods
    struct cmp {
        bool operator()(const pair<int,string>& a, const pair<int,string>& b) const {
            if (a.first != b.first) return a.first > b.first; // higher rating first
            return a.second < b.second; // lexicographically smaller first
        }
    };

    unordered_map<string, set<pair<int,string>, cmp>> cuisine_to_set;

public:
    FoodRatings(vector<string>& foods, vector<string>& cuisines, vector<int>& ratings) {
        for (int i = 0; i < foods.size(); i++) {
            string f = foods[i], c = cuisines[i];
            int r = ratings[i];
            food_to_cuisine[f] = c;
            food_to_rating[f] = r;
            cuisine_to_set[c].insert({r, f});
        }
    }

    void changeRating(string food, int newRating) {
        string cuisine = food_to_cuisine[food];
        int oldRating = food_to_rating[food];
        // Remove old entry
        cuisine_to_set[cuisine].erase({oldRating, food});
        // Insert new entry
        cuisine_to_set[cuisine].insert({newRating, food});
        // Update rating
        food_to_rating[food] = newRating;
    }

    string highestRated(string cuisine) {
        // First element in set is always highest-rated (due to comparator)
        return cuisine_to_set[cuisine].begin()->second;
    }
};
